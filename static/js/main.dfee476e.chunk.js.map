{"version":3,"sources":["Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","name","setName","theList","setList","editText","seteditText","ternValue","setTernValue","addItem","id","Math","random","value","alert","align","Box","mt","p","TextField","required","label","variant","type","placeholder","onChange","e","target","onKeyDown","key","Button","onClick","color","map","ListItemText","updateList2","submitEdits","style","maxWidth","maxHeight","minWidth","minHeight","newList","filter","deleteItem","App","params","particles","line_linked","shadow","enable","blur","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfee476e.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n\r\n\r\n\r\nfunction Todo() {\r\n    const [name, setName] = useState(\"\");\r\n    const [theList, setList] = useState([]);\r\n    const [editText, seteditText] = useState(\"\");\r\n    const [ternValue, setTernValue] = useState(null); \r\n\r\n\r\n\r\n   const handleChange = (e) =>{\r\n      if (e.key === \"Enter\") {\r\n       {addItem()} \r\n      }\r\n          \r\n    }; \r\n\r\n\r\n    const addItem = () =>  {\r\n        \r\n        if (name !== \"\" ) {\r\n\r\n         setList([...theList, {\r\n          id: 1 + Math.random(),\r\n          value: name\r\n         \r\n        }]);\r\n\r\n      }\r\n        if(name === \"\"){\r\n          alert(\"Please enter a value\")\r\n        }\r\n\r\n        \r\n        setName(\"\"); \r\n    \r\n        };\r\n\r\n    const deleteItem = (id) => {\r\n      \r\n      const oldList = [...theList];\r\n\r\n      const newList = oldList.filter(e => e.id !== id )\r\n\r\n      setList(newList);\r\n\r\n    } \r\n\r\n    const submitEdits = (id) => {\r\n      const updateList2 = [...theList].map(e => {\r\n        if (e.id === id) {\r\n          e.value = editText;\r\n       \r\n        }\r\n        return e;\r\n      \r\n      \r\n      });\r\n      setList(updateList2);\r\n      setTernValue(null);\r\n      seteditText(\"\"); \r\n    };\r\n\r\n    \r\n    \r\n      return (\r\n      \r\n        <div>\r\n          <h1 align=\"center\">Todo List</h1>\r\n           <Box mt=\"auto\"  p={1}/>\r\n            \r\n            <div align=\"center\">\r\n           \r\n                <TextField\r\n                 required\r\n                 id=\"standard-read-only-input\"\r\n                 label=\"My Todo List\"\r\n                 variant=\"outlined\"\r\n                 type=\"text\"\r\n                 placeholder=\"Input someting\"\r\n                 onChange = {(e) => setName(e.target.value)}\r\n                 value = {name}\r\n                 onKeyDown={handleChange}\r\n                \r\n                />\r\n\r\n                \r\n                <div >\r\n                \r\n                <Button onClick = {addItem}   variant=\"contained\" color=\"primary\">\r\n                  Enter Value\r\n                </Button>\r\n               \r\n\r\n                <ul align=\"center\">\r\n                \r\n                  {theList.map( e => (\r\n                    <ListItemText align=\"center\" key={e.id}>\r\n                      <div> \r\n                        {e.id === ternValue ? (\r\n                          <div>\r\n                          <TextField required\r\n                          id=\"standard-read-only-input\"\r\n                          label=\"Change your value here\"\r\n                          \r\n                          variant=\"outlined\"\r\n                          type=\"text\"\r\n                          placeholder=\"Change the Text\"\r\n                          onChange = {(e) => seteditText(e.target.value) }\r\n                           />  \r\n                          \r\n                          \r\n\r\n                          </div>      \r\n                         ) : (\r\n                           <div> {e.value}  </div>\r\n                           \r\n                        )}\r\n                        </div>\r\n                          \r\n                          <div>\r\n                         \r\n                            {e.id === ternValue ? (\r\n\r\n                              <Button\r\n                            \r\n                              onClick = {() => submitEdits(e.id)} \r\n                              variant=\"contained\" color=\"primary\" \r\n                              style={{maxWidth: '70px', maxHeight: '20px', minWidth: '30px', minHeight: '20px'}}>  Update </Button>\r\n                            ) : ( \r\n\r\n                              <div>\r\n                                <Button \r\n                                onClick = {() => setTernValue(e.id)} \r\n                                variant=\"contained\"\r\n                                style={{maxWidth: '50px', maxHeight: '20px', minWidth: '30px', minHeight: '20px'}} variant=\"contained\" color=\"primary\"> Edit</Button>\r\n\r\n                                <Button\r\n                            \r\n                                onClick = { () => deleteItem(e.id)} \r\n                                variant=\"contained\" \r\n                                color=\"secondary\"  \r\n                                style={{ maxHeight: '20px', minHeight: '20px'}} > \r\n                                  Delete Value</Button> \r\n                              </div>\r\n                                  \r\n                            )}\r\n                                     \r\n                              \r\n                          </div>\r\n                                         \r\n                       </ListItemText>\r\n                  ))}\r\n                  \r\n                </ul>\r\n                </div>\r\n\r\n            \r\n            </div>\r\n\r\n\r\n         \r\n    \r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\nexport default Todo;","import React, {useState} from 'react';\nimport Particles from 'react-particles-js';\nimport Todo from './Todo'\n\n\n\n\nfunction App() {\n  \n\n\n\n  return (\n\n\n  \n    <div>\n      <Todo/> \n      <Particles \n              params={{\n            \t\tparticles: {\n            \t\t\tline_linked: {\n            \t\t\t\tshadow: {\n            \t\t\t\t\tenable: true,\n            \t\t\t\t\tcolor: \"#3CA9D1\",\n            \t\t\t\t\tblur: 5\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}\n            \t}}\n              style={{\n                width: '100%'\n                \n              }}\n            />\n      \n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}